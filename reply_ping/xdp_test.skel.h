/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __XDP_TEST_BPF_SKEL_H__
#define __XDP_TEST_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct xdp_test_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *bss;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *descarta_pkt;
	} progs;
	struct {
		struct bpf_link *descarta_pkt;
	} links;
	struct xdp_test_bpf__bss {
		long long cont;
	} *bss;

#ifdef __cplusplus
	static inline struct xdp_test_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct xdp_test_bpf *open_and_load();
	static inline int load(struct xdp_test_bpf *skel);
	static inline int attach(struct xdp_test_bpf *skel);
	static inline void detach(struct xdp_test_bpf *skel);
	static inline void destroy(struct xdp_test_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
xdp_test_bpf__destroy(struct xdp_test_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
xdp_test_bpf__create_skeleton(struct xdp_test_bpf *obj);

static inline struct xdp_test_bpf *
xdp_test_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct xdp_test_bpf *obj;
	int err;

	obj = (struct xdp_test_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = xdp_test_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	xdp_test_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct xdp_test_bpf *
xdp_test_bpf__open(void)
{
	return xdp_test_bpf__open_opts(NULL);
}

static inline int
xdp_test_bpf__load(struct xdp_test_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct xdp_test_bpf *
xdp_test_bpf__open_and_load(void)
{
	struct xdp_test_bpf *obj;
	int err;

	obj = xdp_test_bpf__open();
	if (!obj)
		return NULL;
	err = xdp_test_bpf__load(obj);
	if (err) {
		xdp_test_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
xdp_test_bpf__attach(struct xdp_test_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
xdp_test_bpf__detach(struct xdp_test_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *xdp_test_bpf__elf_bytes(size_t *sz);

static inline int
xdp_test_bpf__create_skeleton(struct xdp_test_bpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "xdp_test_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "xdp_test.bss";
	map->map = &obj->maps.bss;
	map->mmaped = (void **)&obj->bss;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 1 * s->map_skel_sz);
	map->name = "xdp_test.rodata";
	map->map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "descarta_pkt";
	s->progs[0].prog = &obj->progs.descarta_pkt;
	s->progs[0].link = &obj->links.descarta_pkt;

	s->data = xdp_test_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *xdp_test_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xd0\x0f\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1b\0\
\x01\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x79\x13\0\0\0\0\0\0\x07\x03\0\0\x01\
\0\0\0\x7b\x31\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x15\
\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\x01\0\0\0\x95\0\0\0\0\0\0\0\x44\x65\x73\
\x63\x61\x72\x74\x61\x6e\x64\x6f\x20\x70\x6b\x74\x2e\x2e\x2e\x25\x64\0\x47\x50\
\x4c\0\x01\x11\x01\x25\x25\x13\x05\x03\x25\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\
\x06\x73\x17\0\0\x02\x34\0\x03\x25\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\
\x03\x24\0\x03\x25\x3e\x0b\x0b\x0b\0\0\x04\x2e\x01\x11\x1b\x12\x06\x40\x18\x7a\
\x19\x03\x25\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x05\x34\0\x03\x25\x49\
\x13\x3a\x0b\x3b\x0b\x02\x18\0\0\x06\x05\0\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\
\x07\x01\x01\x49\x13\0\0\x08\x21\0\x49\x13\x37\x0b\0\0\x09\x26\0\x49\x13\0\0\
\x0a\x24\0\x03\x25\x0b\x0b\x3e\x0b\0\0\x0b\x34\0\x03\x25\x49\x13\x3a\x0b\x3b\
\x0b\0\0\x0c\x0f\0\x49\x13\0\0\x0d\x15\x01\x49\x13\x27\x19\0\0\x0e\x05\0\x49\
\x13\0\0\x0f\x18\0\0\0\x10\x16\0\x49\x13\x03\x25\x3a\x0b\x3b\x0b\0\0\x11\x04\
\x01\x49\x13\x03\x25\x0b\x0b\x3a\x0b\x3b\x05\0\0\x12\x28\0\x03\x25\x1c\x0f\0\0\
\x13\x13\x01\x03\x25\x0b\x0b\x3a\x0b\x3b\x05\0\0\x14\x0d\0\x03\x25\x49\x13\x3a\
\x0b\x3b\x05\x38\x0b\0\0\0\x20\x01\0\0\x05\0\x01\x08\0\0\0\0\x01\0\x1d\0\x01\
\x08\0\0\0\0\0\0\0\x02\x03\x58\0\0\0\x08\0\0\0\x02\x03\x2e\0\0\0\0\x0c\x02\xa1\
\0\x03\x04\x05\x08\x04\x03\x58\0\0\0\x01\x5a\x13\0\x0f\xd7\0\0\0\x05\x05\x55\0\
\0\0\0\x12\x02\xa1\x01\x06\x15\0\x0f\xdb\0\0\0\0\x07\x61\0\0\0\x08\x6a\0\0\0\
\x15\0\x09\x66\0\0\0\x03\x06\x06\x01\x0a\x07\x08\x07\x0b\x08\x76\0\0\0\x02\xb9\
\x09\x7b\0\0\0\x0c\x80\0\0\0\x0d\x91\0\0\0\x0e\x95\0\0\0\x0e\x9a\0\0\0\x0f\0\
\x03\x09\x05\x08\x0c\x61\0\0\0\x10\xa2\0\0\0\x0b\x01\x1b\x03\x0a\x07\x04\x02\
\x0c\xb1\0\0\0\0\x17\x02\xa1\x02\x07\x66\0\0\0\x08\x6a\0\0\0\x04\0\x11\xa2\0\0\
\0\x12\x04\x03\x27\x19\x12\x0d\0\x12\x0e\x01\x12\x0f\x02\x12\x10\x03\x12\x11\
\x04\0\x03\x14\x05\x04\x0c\xe0\0\0\0\x13\x1c\x18\x03\x32\x19\x14\x16\x9a\0\0\0\
\x03\x33\x19\0\x14\x17\x9a\0\0\0\x03\x34\x19\x04\x14\x18\x9a\0\0\0\x03\x35\x19\
\x08\x14\x19\x9a\0\0\0\x03\x37\x19\x0c\x14\x1a\x9a\0\0\0\x03\x38\x19\x10\x14\
\x1b\x9a\0\0\0\x03\x3a\x19\x14\0\0\x78\0\0\0\x05\0\0\0\0\0\0\0\x27\0\0\0\x36\0\
\0\0\x64\0\0\0\x69\0\0\0\x73\0\0\0\x7b\0\0\0\x80\0\0\0\x94\0\0\0\xa5\0\0\0\xaa\
\0\0\0\xb7\0\0\0\xbd\0\0\0\xc6\0\0\0\xd2\0\0\0\xdb\0\0\0\xe4\0\0\0\xeb\0\0\0\
\xf8\0\0\0\x03\x01\0\0\x10\x01\0\0\x14\x01\0\0\x18\x01\0\0\x1d\x01\0\0\x26\x01\
\0\0\x30\x01\0\0\x40\x01\0\0\x4f\x01\0\0\x5e\x01\0\0\x55\x62\x75\x6e\x74\x75\
\x20\x63\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x38\x2e\x31\
\x2e\x33\x20\x28\x31\x75\x62\x75\x6e\x74\x75\x31\x29\0\x78\x64\x70\x5f\x74\x65\
\x73\x74\x2e\x62\x70\x66\x2e\x63\0\x2f\x68\x6f\x6d\x65\x2f\x75\x62\x75\x6e\x74\
\x75\x2f\x44\x6f\x63\x75\x6d\x65\x6e\x74\x73\x2f\x41\x72\x71\x75\x69\x74\x65\
\x74\x75\x72\x61\x2f\x72\x65\x70\x6c\x79\x5f\x70\x69\x6e\x67\0\x63\x6f\x6e\x74\
\0\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x63\x68\
\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\
\x5f\x5f\0\x62\x70\x66\x5f\x74\x72\x61\x63\x65\x5f\x70\x72\x69\x6e\x74\x6b\0\
\x6c\x6f\x6e\x67\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\
\x75\x33\x32\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x58\x44\x50\x5f\x41\x42\x4f\
\x52\x54\x45\x44\0\x58\x44\x50\x5f\x44\x52\x4f\x50\0\x58\x44\x50\x5f\x50\x41\
\x53\x53\0\x58\x44\x50\x5f\x54\x58\0\x58\x44\x50\x5f\x52\x45\x44\x49\x52\x45\
\x43\x54\0\x78\x64\x70\x5f\x61\x63\x74\x69\x6f\x6e\0\x64\x65\x73\x63\x61\x72\
\x74\x61\x5f\x70\x6b\x74\0\x69\x6e\x74\0\x63\x74\x78\0\x64\x61\x74\x61\0\x64\
\x61\x74\x61\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\
\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\
\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\
\x64\x65\x78\0\x78\x64\x70\x5f\x6d\x64\0\x24\0\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\
\0\0\x90\x01\0\0\x90\x01\0\0\x63\x01\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\
\x06\0\0\x04\x18\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\x0d\0\0\0\x03\0\0\0\x20\0\0\
\0\x16\0\0\0\x03\0\0\0\x40\0\0\0\x20\0\0\0\x03\0\0\0\x60\0\0\0\x30\0\0\0\x03\0\
\0\0\x80\0\0\0\x3f\0\0\0\x03\0\0\0\xa0\0\0\0\x4e\0\0\0\0\0\0\x08\x04\0\0\0\x54\
\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\x0d\x06\0\0\0\x61\0\0\0\
\x01\0\0\0\x65\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x69\0\0\0\x01\0\0\x0c\x05\
\0\0\0\x08\x01\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\x12\x01\0\0\0\0\0\x0e\x08\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x0b\0\0\0\x17\x01\0\0\0\0\0\x01\x01\0\0\0\x08\
\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x0a\0\0\0\x0d\0\0\0\x15\0\0\0\x1c\x01\0\0\0\
\0\0\x01\x04\0\0\0\x20\0\0\0\x30\x01\0\0\0\0\0\x0e\x0c\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x03\0\0\0\0\x0b\0\0\0\x0d\0\0\0\x04\0\0\0\x45\x01\0\0\0\0\0\x0e\x0f\0\0\0\
\x01\0\0\0\x4e\x01\0\0\x01\0\0\x0f\0\0\0\0\x09\0\0\0\0\0\0\0\x08\0\0\0\x53\x01\
\0\0\x01\0\0\x0f\0\0\0\0\x0e\0\0\0\0\0\0\0\x15\0\0\0\x5b\x01\0\0\x01\0\0\x0f\0\
\0\0\0\x10\0\0\0\0\0\0\0\x04\0\0\0\0\x78\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\
\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\
\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\
\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\
\x6e\x64\x65\x78\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\
\x69\x6e\x74\0\x63\x74\x78\0\x69\x6e\x74\0\x64\x65\x73\x63\x61\x72\x74\x61\x5f\
\x70\x6b\x74\0\x78\x64\x70\0\x2f\x68\x6f\x6d\x65\x2f\x75\x62\x75\x6e\x74\x75\
\x2f\x44\x6f\x63\x75\x6d\x65\x6e\x74\x73\x2f\x41\x72\x71\x75\x69\x74\x65\x74\
\x75\x72\x61\x2f\x72\x65\x70\x6c\x79\x5f\x70\x69\x6e\x67\x2f\x78\x64\x70\x5f\
\x74\x65\x73\x74\x2e\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x63\x6f\x6e\x74\x20\
\x2b\x3d\x31\x3b\0\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\
\x22\x44\x65\x73\x63\x61\x72\x74\x61\x6e\x64\x6f\x20\x70\x6b\x74\x2e\x2e\x2e\
\x25\x64\x22\x2c\x20\x63\x6f\x6e\x74\x29\x3b\0\x20\x20\x20\x20\x72\x65\x74\x75\
\x72\x6e\x20\x58\x44\x50\x5f\x44\x52\x4f\x50\x3b\0\x6c\x6f\x6e\x67\x20\x6c\x6f\
\x6e\x67\0\x63\x6f\x6e\x74\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\
\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x64\x65\x73\x63\x61\x72\x74\x61\
\x5f\x70\x6b\x74\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x6c\x69\x63\x65\x6e\x73\
\x65\0\x2e\x62\x73\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\
\x65\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x3c\0\0\0\x50\0\0\
\0\0\0\0\0\x08\0\0\0\x76\0\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\x10\0\0\0\x76\0\0\0\
\x03\0\0\0\0\0\0\0\x7a\0\0\0\xb7\0\0\0\x0a\x44\0\0\x28\0\0\0\x7a\0\0\0\xc5\0\0\
\0\x05\x48\0\0\x48\0\0\0\x7a\0\0\0\xf3\0\0\0\x05\x4c\0\0\x0c\0\0\0\xff\xff\xff\
\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\0\0\0\0\0\
\0\0\xa6\0\0\0\x05\0\x08\0\x82\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\
\0\0\0\x01\0\0\x01\x01\x01\x1f\x04\0\0\0\0\x2e\0\0\0\x47\0\0\0\x58\0\0\0\x03\
\x01\x1f\x02\x0f\x05\x1e\x04\x6b\0\0\0\0\x4b\xdc\x93\x5e\x97\xed\x80\xd9\xbb\
\x05\xbd\x9b\x73\xcc\x4a\x63\x7a\0\0\0\x01\xb8\x10\xf2\x70\x73\x3e\x10\x63\x19\
\xb6\x7e\xf5\x12\xc6\x24\x6e\x85\0\0\0\x02\x23\x79\x0f\xa8\x65\xc0\xb6\x47\xa0\
\x63\xaa\x3a\x37\xbd\x90\x78\x97\0\0\0\x03\xc7\x0f\x42\x66\xb0\xcf\xb8\xac\xf5\
\xb7\xb1\xf7\x93\x87\x5b\x0a\x04\0\x05\x0a\x0a\0\x09\x02\0\0\0\0\0\0\0\0\x03\
\x10\x01\x05\x05\x59\x4b\x02\x02\0\x01\x01\x2f\x68\x6f\x6d\x65\x2f\x75\x62\x75\
\x6e\x74\x75\x2f\x44\x6f\x63\x75\x6d\x65\x6e\x74\x73\x2f\x41\x72\x71\x75\x69\
\x74\x65\x74\x75\x72\x61\x2f\x72\x65\x70\x6c\x79\x5f\x70\x69\x6e\x67\0\x2f\x75\
\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x61\x73\x6d\x2d\x67\x65\x6e\x65\
\x72\x69\x63\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x62\x70\x66\
\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x6c\x69\x6e\x75\x78\0\
\x78\x64\x70\x5f\x74\x65\x73\x74\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x2d\x6c\
\x6c\x36\x34\x2e\x68\0\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\
\x73\x2e\x68\0\x62\x70\x66\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xe0\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x27\0\0\0\x01\0\x06\0\0\0\0\0\0\0\0\0\
\x15\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0b\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x14\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3c\0\0\0\x12\0\x03\0\0\0\0\0\0\0\
\0\0\x58\0\0\0\0\0\0\0\x22\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\xb6\0\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\x0d\0\0\0\x28\0\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\
\0\x05\0\0\0\x11\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\
\x0a\0\0\0\x1f\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x0c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x1c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x24\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x2c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x34\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x3c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x44\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x4c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x50\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x54\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x58\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x5c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x64\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x68\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x6c\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x70\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x74\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x78\0\0\0\0\0\0\0\x03\0\0\0\
\x07\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x0d\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\
\x04\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x0e\0\0\0\x20\0\0\0\0\0\0\0\x02\0\0\0\
\x02\0\0\0\x70\x01\0\0\0\0\0\0\x04\0\0\0\x0d\0\0\0\x88\x01\0\0\0\0\0\0\x03\0\0\
\0\x04\0\0\0\xa0\x01\0\0\0\0\0\0\x04\0\0\0\x0e\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\
\0\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\
\x09\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\x03\0\0\0\
\x0b\0\0\0\x26\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x2a\0\0\0\0\0\0\0\x03\0\0\0\
\x0b\0\0\0\x2e\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x3a\0\0\0\0\0\0\0\x03\0\0\0\
\x0b\0\0\0\x4f\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x64\0\0\0\0\0\0\0\x03\0\0\0\
\x0b\0\0\0\x79\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x96\0\0\0\0\0\0\0\x02\0\0\0\
\x02\0\0\0\x0c\x03\x0e\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\
\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x63\
\x6f\x6e\x74\0\x64\x65\x73\x63\x61\x72\x74\x61\x5f\x70\x6b\x74\x2e\x5f\x5f\x5f\
\x5f\x66\x6d\x74\0\x64\x65\x73\x63\x61\x72\x74\x61\x5f\x70\x6b\x74\0\x2e\x72\
\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\x5f\x6f\x66\x66\x73\x65\x74\
\x73\0\x2e\x62\x73\x73\0\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\x2e\x64\x65\
\x62\x75\x67\x5f\x6c\x69\x6e\x65\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\
\x62\x75\x67\x5f\x61\x64\x64\x72\0\x2e\x72\x65\x6c\x78\x64\x70\0\x2e\x72\x65\
\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\x76\x6d\x5f\x61\
\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\
\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\
\x75\x67\x5f\x66\x72\x61\x6d\x65\0\x78\x64\x70\x5f\x74\x65\x73\x74\x2e\x62\x70\
\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\
\x72\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xef\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xbb\x0e\0\0\0\0\0\0\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x94\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\
\0\0\x58\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\0\
\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0b\0\0\0\0\0\0\x20\0\0\0\
\0\0\0\0\x1a\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x60\0\0\0\x08\
\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\0\0\0\x01\0\0\0\x02\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\0\0\0\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xad\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb1\0\0\
\0\0\0\0\0\xf5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x9c\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa6\x01\0\0\0\0\0\0\x24\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x0b\0\0\0\0\0\0\x40\0\0\0\0\0\
\0\0\x1a\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x4d\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xca\x02\0\0\0\0\0\0\x7c\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x49\0\0\0\x09\0\0\0\x40\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x88\x0b\0\0\0\0\0\0\xd0\x01\0\0\0\0\0\0\x1a\0\0\0\x0b\0\0\
\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x65\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x46\x03\0\0\0\0\0\0\x65\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\x84\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xab\x04\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x80\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\x0d\0\0\
\0\0\0\0\x40\0\0\0\0\0\0\0\x1a\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\x0b\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd4\x04\0\0\0\0\0\0\
\x0b\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\x01\
\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x0d\0\0\0\0\0\0\x30\0\0\0\
\0\0\0\0\x1a\0\0\0\x10\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x07\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\x40\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x0d\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x1a\0\0\0\x12\0\
\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xd3\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x50\x08\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xcf\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\x0e\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x1a\0\0\0\x14\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\xc3\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\x08\
\0\0\0\0\0\0\xaa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xbf\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0e\0\0\0\0\0\0\
\x90\0\0\0\0\0\0\0\x1a\0\0\0\x16\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x70\
\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\x09\0\0\0\0\0\0\x9d\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\xa8\0\0\0\x03\
\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x0e\0\0\0\0\0\0\x03\0\0\0\0\
\0\0\0\x1a\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf7\0\0\0\x02\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x09\0\0\0\0\0\0\x68\x01\0\0\0\0\0\0\x01\0\
\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct xdp_test_bpf *xdp_test_bpf::open(const struct bpf_object_open_opts *opts) { return xdp_test_bpf__open_opts(opts); }
struct xdp_test_bpf *xdp_test_bpf::open_and_load() { return xdp_test_bpf__open_and_load(); }
int xdp_test_bpf::load(struct xdp_test_bpf *skel) { return xdp_test_bpf__load(skel); }
int xdp_test_bpf::attach(struct xdp_test_bpf *skel) { return xdp_test_bpf__attach(skel); }
void xdp_test_bpf::detach(struct xdp_test_bpf *skel) { xdp_test_bpf__detach(skel); }
void xdp_test_bpf::destroy(struct xdp_test_bpf *skel) { xdp_test_bpf__destroy(skel); }
const void *xdp_test_bpf::elf_bytes(size_t *sz) { return xdp_test_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
xdp_test_bpf__assert(struct xdp_test_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->bss->cont) == 8, "unexpected size of 'cont'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __XDP_TEST_BPF_SKEL_H__ */
